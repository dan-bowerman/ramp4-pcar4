import{fj as f,j3 as p,j4 as m,C as y,j5 as b,j6 as F,j0 as d,eT as A,d4 as v,iL as q,j7 as S,fd as h,f3 as w,j8 as C,fw as L,eS as E}from"./main.4a115682.js";import{C as G}from"./common-layer.2345c948.js";class ${sql;cache;extent;constructor(){this.sql={},this.extent=void 0,this.cache={}}sqlActiveFilters(e=[]){const t=this.sql,i=Object.keys(t).filter(r=>t[r]);return e.length===0?i:i.filter(r=>e.indexOf(r)===-1)}isActive(){return this.sqlActiveFilters().length>0}getCombinedSql(e=[]){const t=this.sqlActiveFilters(e),i=t.length;return i===0?"":i===1?this.sql[t[0]]:t.map(r=>`(${this.sql[r]})`).join(" AND ")}setSql(e,t){this.sql[e]=t,this.clearCacheSet(e)}getSql(e){return this.sql[e]||""}setExtent(e){e.isEqual(this.extent)||(this.extent=e,this.clearCacheSet(f.EXTENT))}getCacheKey(e,t){return`_cache$${e.sort().join("$")}${t?"$"+f.EXTENT:""}$`}getCache(e,t){const i=this.getCacheKey(e,t);return this.cache[i]}setCache(e,t,i){const r=this.getCacheKey(t,i);this.cache[r]=e}cacheActiveKeys(){const e=this.cache;return Object.keys(e).filter(t=>e[t])}clearAllCaches(){this.cache={}}clearCacheSet(e){this.cacheActiveKeys().forEach(t=>{t.indexOf(`$${e}$`)>-1&&delete this.cache[t]})}clearAll(){this.sql={},this.extent=void 0,this.clearAllCaches()}}class U extends G{geomType;esriFields;fieldList;attLoader;renderer;serviceUrl;quickCache;filter;constructor(e,t){super(e,t),this.supportsIdentify=!0,this.geomType=p.UNKNOWN,this.serviceUrl="",this.fieldList="",this.esriFields=[],this.filter=new $}notLoadedErr(){console.error("Attempted to manipulate the layer before it was loaded"),console.trace()}makeEsriLayerConfig(e){return super.makeEsriLayerConfig(e)}async loadLayerMetadata(e={}){if(!this.serviceUrl)return;const[t,i]=await m(y(this.serviceUrl,{query:{f:"json"}}));if(!i)return console.error(`Service metadata load error: ${this.serviceUrl}`,t),Promise.reject(new Error(`Service metadata load error: ${this.serviceUrl}`));if(!i.data)return console.error(`Service metadata load error: ${this.serviceUrl}`),Promise.reject(new Error(`Service metadata load error: ${this.serviceUrl}`));const r=i.data;if(this.geomType=this.$iApi.geo.geom.serverGeomTypeToRampGeomType(r.geometryType),this.quickCache=new b(this.geomType),this.scaleSet.minScale=r.effectiveMinScale||r.minScale,this.scaleSet.maxScale=r.effectiveMaxScale||r.maxScale,this.supportsFeatures=!1,this.extent=r.extent?F.fromArcServer(r.extent,this.id+"_extent"):void 0,r.type==="Feature Layer"){this.supportsFeatures=!0,this.dataFormat=d.ESRI_FEATURE,this.esriFields=A(r.fields.map(n=>v.fromJSON(n))),this.nameField=r.displayField,this.esriFields.every(n=>n.type==="oid"?(this.oidField=n.name,!1):!0)&&(this.oidField=r.objectIdField||(()=>(console.error(`Encountered service with no OID defined: ${this.serviceUrl}`),""))());const a=e&&e.customRenderer&&e.customRenderer.type?e.customRenderer:q(r.drawingInfo.renderer);this.renderer=this.$iApi.geo.symbology.makeRenderer(a,this.esriFields),this.legend=this.$iApi.geo.symbology.rendererToLegend(this.renderer);const l={supportsLimit:(r.currentVersion||1)>=10.1,serviceUrl:this.serviceUrl,oidField:this.oidField,batchSize:-1,attribs:"*"};this.attLoader=new S(this.$iApi,l)}else this.dataFormat=d.ESRI_RASTER,this.esriFields=[]}processFieldMetadata(e=void 0){if(!e){this.fieldList="*";return}if(!e.fieldInfo)throw new Error("processFieldMetadata called before fieldInfo was set on config metadata");if(e.exclusiveFields){e.fieldInfo.find(i=>i.name===this.oidField)||e.fieldInfo.push({name:this.oidField}),this.fieldList=e.fieldInfo.map(i=>i.name).join(",");const t=e.fieldInfo;this.esriFields=this.esriFields.filter(i=>t.find(r=>r.name===i.name))}else this.fieldList="*";e.fieldInfo.forEach(t=>{if(t.alias){const i=this.esriFields.find(r=>r.name===t.name);i&&(i.alias=t.alias)}})}getAttributes(){return this.attLoader?this.attLoader.getAttribs():(this.noLayerErr(),Promise.resolve({oidIndex:{},features:[]}))}get fields(){return this.esriFields.map(e=>(e=h(e),{name:e.name,alias:e.alias,type:e.type,length:e.length}))}set fields(e){super.fields=e}abortAttributeLoad(){this.attLoader?this.attLoader.abortAttribLoad():this.noLayerErr()}destroyAttributes(){this.attLoader?this.attLoader.destroyAttribs():this.noLayerErr()}getTabularAttributes(){if(!this.attLoader)throw new Error("getTabularAttributes call with missing attribute loader");return this.attLoader.tabularAttributesCache||(this.attLoader.tabularAttributesCache=this.getTabularAttributesGuts()),this.attLoader.tabularAttributesCache}async getTabularAttributesGuts(){if(!this.attLoader)throw new Error("getTabularAttributesGuts call with missing attribute loader");if(this.dataFormat===d.ESRI_RASTER)throw new Error("Attempting to get attributes on a raster layer.");const e=await this.attLoader.getAttribs(),t=this.esriFields.filter(r=>e.features[0].hasOwnProperty(h(r).name)).map(r=>({data:h(r).name,title:h(r).alias||h(r).name})),i=e.features.map(r=>{const s=w({},r);return s.rvInteractive="",s.rvSymbol=this.renderer?.getGraphicIcon(r),s});return t.forEach(r=>{if(r.data.substr(-2)==="()"){const s=function(){return this[r.data]},a=r.data.substr(0,r.data.length-2);i.forEach(l=>{l[a]=s})}}),{columns:t,rows:i,fields:this.fields,oidField:this.oidField}}async getGraphic(e,t){let i={},r=new C;const s=this.$iApi.geo.map;if(!this.quickCache)throw new Error("getGraphic call with missing quickCache");if(!this.attLoader)throw new Error("getGraphic call with missing attribute loader");let a=!1,l=!1,n=0;if(t.getAttribs||t.getStyle){let o=this.quickCache.getAttribs(e);if(o)i=o;else if(this.attLoader.isLoaded||this.isFile){const c=await this.attLoader.getAttribs();i=c.features[c.oidIndex[e]]}else a=!0}if(t.getGeom){n=s.getScale();const o=this.quickCache.getGeom(e,n);o?r=o:l=!0}if(a||l){const o={oid:e,serviceUrl:this.serviceUrl,includeGeometry:l,attribs:this.fieldList};l&&(o.mapSR=s.getSR().wkid?.toString(),this.quickCache.isPoint||(o.maxOffset=s.esriView?.resolution));const c=await this.$iApi.geo.attributes.loadSingleFeature(o);l&&(this.quickCache.setGeom(e,c.geometry,n),r=c.geometry),(a||typeof this.quickCache.getAttribs(e)>"u")&&(this.quickCache.setAttribs(e,c.attributes),a&&(i=c.attributes))}const u=new L(r,"",t.getAttribs?i:void 0);if(t.getStyle){const o=h(this.renderer.getGraphicSymbol(i));u.style=this.$iApi.geo.geom.styleEsriToRamp(o)}return u}async getIcon(e){if(!this.renderer)throw new Error("getIcon called before renderer is defined");const t=await this.getGraphic(e,{getAttribs:!0});return this.$iApi.geo.symbology.getGraphicIcon(t.attributes||{},this.renderer)}setSqlFilter(e,t){const i=this.filter.getSql(e);if(t===i)return;this.filter.setSql(e,t),this.$iApi.event.emit(E.FILTER_CHANGE,{uid:this.uid,filterKey:e});const r=`${this.uid}-${e}-${t}`;this._lastFilterUpdate=r,setTimeout(()=>{this._lastFilterUpdate===r&&this.applySqlFilter()},100)}applySqlFilter(e=[]){throw new Error("attempted to apply sql filter to a layer not equipped for it. likely a new subclass of AttribFC did not override applySqlFilter")}getSqlFilter(e){return this.filter.getSql(e)}getCombinedSqlFilter(e){return this.filter.getCombinedSql(e)}async getFilterOIDs(e=[],t=void 0){const i=this.filter.getCombinedSql(e),r=!!t;if(!(i||r))return;t&&this.filter.setExtent(t);const s=this.filter.sqlActiveFilters(e);let a=this.filter.getCache(s,r);if(!a){const l={filterGeometry:t,filterSql:i,includeGeometry:!1};a=this.queryOIDs(l),this.filter.setCache(a,s,r)}return a}async loadFeatureCount(){if(!this.serviceUrl)return;const e={query:{f:"json",where:"1=1",returnCountOnly:!0,returnGeometry:!1}},[t,i]=await m(y(`${this.serviceUrl}/query`,e));if(!i){console.warn(`Feature count request unsuccessful: ${this.serviceUrl}`,t);return}if(!i.data){console.warn(`Unable to load feature count: ${this.serviceUrl}`);return}this.featureCount=i.data.count}queryOIDs(e){this.isFile&&(console.error("a file layer called a server based query function"),console.trace());const t={url:this.serviceUrl,...e};return this.$iApi.geo.query.arcGisServerQueryIds(t)}async queryFeaturesDiscrete(e){e.outFields||(e.outFields=this.fieldList);const t=await this.queryOIDs(e),i={getGeom:!!e.includeGeometry,getAttribs:!0};return t.map(r=>({oid:r,graphic:this.getGraphic(r,i)}))}async queryFeatures(e){const t=await this.queryFeaturesDiscrete(e);return Promise.all(t.map(i=>i.graphic))}}export{U as A};
