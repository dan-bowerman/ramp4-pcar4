import{e as i,d as a,i as o,s as l}from"./main.57abf9f4.js";import m from"./FeatureLayerView2D.a3058a12.js";import"./Container.6fe4955c.js";import"./drapedUtils.a11dfa68.js";import"./definitions.21e97413.js";import"./LayerView.2c69c2fd.js";import"./schemaUtils.f8e89132.js";import"./Utils.2d8a73c0.js";import"./Texture.062cda32.js";import"./MaterialKey.70dbccbf.js";import"./visualVariablesUtils.28f0e838.js";import"./CIMSymbolHelper.d7f48bb7.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.36af0076.js";import"./quantizationUtils.328310fd.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.5db9bd72.js";import"./popupUtils.cec2b1be.js";import"./RefreshableLayerView.1763a887.js";const n=p=>{let e=class extends p{initialize(){const{layer:r,view:s}=this;r.source.supportsSpatialReference(s.spatialReference)||this.addResolvingPromise(Promise.reject(new l("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:r})))}get availableFields(){return this.layer.fieldsIndex.fields.map(r=>r.name)}};return i([a()],e.prototype,"layer",void 0),i([a({readOnly:!0})],e.prototype,"availableFields",null),e=i([o("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=i([o("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const j=t;export{j as default};
