import{aj as Je,e as I,d as S,M as L,kd as de,ke as _e,p as G,hr as ne,d3 as We,kf as qe,i as Y,kg as je,f as A,i4 as Xe,ib as Ke,r as P,kh as Me,bc as Ze,C as Ue,ki as Qe,kj as et,kk as tt,i6 as it,kl as st,ix as nt,N as rt,s as $,km as at,i9 as Pe,A as V,i5 as ot,aZ as N,kn as fe,ia as lt,W as ut,ko as Fe,kp as re,cP as Ge,i8 as ct,i7 as ht,E as Ve,kq as Re,kr as ft,aq as dt,ks as mt,O as pt,kt as yt,ku as gt,i3 as xt,kv as It,kw as wt,kx as vt,ky as me,kz as bt,kA as St,kB as Tt,jp as Rt,jq as Ct,c_ as kt,c$ as _t,j$ as Mt,k1 as Pt,jr as Ft,d0 as Ot,d4 as $t,bG as Dt,d7 as he,kC as Bt,jv as Et,hq as At,i0 as Ht,cT as Nt,kD as zt,jU as Lt,iQ as Jt,kE as Wt,cN as qt}from"./main.855c0a69.js";import{i as Oe,m as $e,x as De,d as jt,h as Ut}from"./RawBlockCache.66fec8d8.js";import{d as Gt,v as Be,A as Ee,q as Vt,P as Ae,G as ve,j as be,L as Yt,T as Xt,R as Kt}from"./rasterProjectionHelper.7119a8f2.js";import{e as Zt,f as Qt,m as Ce,c as ei}from"./utils.2b18f4a7.js";const He=Je.getLogger("esri.layers.mixins.ImageryTileMixin"),ti=e=>{let t=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(i){this._set("url",je(i,He))}set renderer(i){this._set("renderer",i),this.updateRenderer()}async convertVectorFieldData(i,s){if(A(i))return null;const r=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:i,dataType:n},s):Xe(i,n)}async createStreamlinesMesh(i,s){const r=this._rasterJobHandler.instance;return r?r.createStreamlinesMesh(i,s):Ke(i.rendererSettings,i.flowData,P(s.signal)?s.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){const{multidimensionalInfo:s}=this.rasterInfo;if(A(s))return i;let r=i.multidimensionalDefinition||this.multidimensionalDefinition;!A(r)&&r.length||(r=this._getDefaultSlice());const n=i.timeExtent||this.timeExtent;if(P(r)&&P(n)&&(P(n.start)||P(n.end))){var a,u;r=r.map(d=>d.clone());const o=(a=s.variables.find(({name:d})=>d===r[0].variableName))==null||(u=a.dimensions)==null?void 0:u.find(({name:d})=>d==="StdTime"),l=r.find(({dimensionName:d})=>d==="StdTime");if(!o||!l)return{...i,multidimensionalDefinition:null};const{start:c,end:h}=n,m=A(c)?null:c.getTime(),f=A(h)?null:h.getTime(),y=m??f,p=f??m;if(P(o.values)){const d=o.values.filter(g=>{if(Array.isArray(g)){if(y===p)return g[0]<=y&&g[1]>=y;const x=g[0]<=y&&g[1]>y||g[0]<p&&g[1]>=p,w=g[0]>=y&&g[1]<=p||g[0]<y&&g[1]>p;return x||w}return y===p?g===y:g>=y&&g<=p});if(d.length){const g=d.sort((x,w)=>{var k,v,T,b;return y===p?((T=x[0])!=null?T:x)-((b=w[0])!=null?b:w):Math.abs(((k=x[1])!=null?k:x)-p)-Math.abs(((v=w[1])!=null?v:w)-p)})[0];l.values=[g]}else r=null}else if(o.hasRegularIntervals&&o.extent){const[d,g]=o.extent;y>g||p<d?r=null:l.values=y===p?[y]:[Math.max(d,y),Math.min(g,p)]}}return{...i,multidimensionalDefinition:r}}async updateRenderer(){if(!this.loaded||JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const i=this._rasterJobHandler.instance;i&&(this.symbolizer.rendererJSON=Me(this.renderer.toJSON()),this.symbolizer.bind(),await i.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(i,s){const r=i&&i.pixelBlock;if(!(P(r)&&r.pixels&&r.pixels.length>0))return null;let n;await this.updateRenderer();const a=this._rasterJobHandler.instance,{bandIds:u}=this;return n=a?await a.symbolize({...i,simpleStretchParams:s,bandIds:u}):this.symbolizer.symbolize({...i,simpleStretchParams:s,bandIds:u}),n}getTileUrl(i,s,r){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${s}/${r}`:""}getCompatibleTileInfo(i,s,r=!1){if(!this.loaded||A(s))return null;if(r&&i.equals(this.spatialReference))return this.tileInfo;const n=Ze(i);return ne.create({size:256,spatialReference:i,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:s.xmin,y:s.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,s,r,n={}){if(n.requestAsImageElement){const a=this.getTileUrl(i,s,r);return Ue(a,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(u=>u.data)}if(P(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),A(n.multidimensionalDefinition))){const a=n.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,s,r,a),pixelBlock:null}}return await this._initJobHandler(),this.renderer.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(i,s,r,n)}async fetchPixels(i,s,r,n={}){return P(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),A(n.multidimensionalDefinition))?{extent:i,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(i,s,r,n))}async identify(i,s={}){return P(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),A(s.multidimensionalDefinition))?{location:i,value:null}:this.raster.identify(i,s)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var i;const s=this.rasterInfo.multidimensionalInfo;if(!P(s)||this.rasterInfo.dataType!=="standard-time")return!1;const r=(i=this.multidimensionalDefinition[0])==null?void 0:i.variableName;return s.variables.some(n=>n.name===r&&n.dimensions.some(a=>a.name==="StdTime"))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new st;return this._rasterJobHandler.connectionPromise=i.initialize().then(()=>{this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.renderer&&this.updateRenderer()}).catch(()=>null),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(this.interpolation==null){var i;const s=Qe(this.rasterInfo,this.raster.tileType,(i=this.sourceJSON)==null?void 0:i.defaultResamplingMethod);this._set("interpolation",s)}}_getDefaultSlice(){const{multidimensionalInfo:i}=this.raster.rasterInfo;if(!P(i))return null;const s=i.variables[0];return s.dimensions.map(r=>{var n,a;return new _e({variableName:s.name,dimensionName:r.name,values:[(n=(a=r.values)==null?void 0:a[0])!=null?n:r.extent[0]],isSlice:!0})})}_configDefaultRenderer(){const i=this.raster.rasterInfo;var s;this.bandIds||(this.bandIds=et(i)),this.renderer||(this.renderer=tt(i,{bandIds:this.bandIds,variableName:P(this.multidimensionalDefinition)?(s=this.multidimensionalDefinition[0])==null?void 0:s.variableName:null})),this.symbolizer?(this.symbolizer.rendererJSON=Me(this.renderer.toJSON()),this.symbolizer.rasterInfo=i):this.symbolizer=new it({rendererJSON:this.renderer.toJSON(),rasterInfo:i});const r=this.symbolizer.bind();r.success||He.warn("imagery-tile-mixin",r.error||"The given renderer is not supported by the layer.")}};return I([S()],t.prototype,"_cachedRendererJson",void 0),I([S()],t.prototype,"_compatibleFullExtent",void 0),I([S()],t.prototype,"_rasterJobHandler",void 0),I([S()],t.prototype,"bandIds",void 0),I([S()],t.prototype,"copyright",void 0),I([S({type:L}),de("rasterInfo.extent")],t.prototype,"fullExtent",void 0),I([S()],t.prototype,"interpolation",void 0),I([S()],t.prototype,"ioConfig",void 0),I([S({type:[_e]})],t.prototype,"multidimensionalDefinition",void 0),I([S()],t.prototype,"raster",void 0),I([S({readOnly:!0}),de("raster.rasterInfo")],t.prototype,"rasterInfo",void 0),I([S()],t.prototype,"sourceJSON",void 0),I([S({type:G}),de("rasterInfo.spatialReference")],t.prototype,"spatialReference",void 0),I([S({type:ne}),de("rasterInfo.storageInfo.tileInfo")],t.prototype,"tileInfo",void 0),I([S(We)],t.prototype,"url",null),I([S({types:qe})],t.prototype,"renderer",null),I([S()],t.prototype,"symbolizer",void 0),t=I([Y("esri.layers.ImageryTileMixin")],t),t},pe=8;let q=class extends nt(rt){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Gt();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:ne.create(),...e.ioConfig}}),e}set url(e){this._set("url",je(e,Je.getLogger(this.declaredClass)))}async open(e){throw new $("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,s={}){const r=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],s)}async identify(e,t={}){t=this._getRequestOptionsWithSliceId(t);const{spatialReference:i,extent:s}=this.rasterInfo,{datumTransformation:r}=t;let n=Be(e,i,r);if(!s.intersects(n))return{location:n,value:null};if(P(this.rasterInfo.transform)){const w=this.rasterInfo.transform.inverseTransform(n);if(!this.rasterInfo.nativeExtent.intersects(w))return{location:w,value:null};n=w}let a=0;if(t.srcResolution)a=Ee(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(a=await this.computeBestPyramidLevelForLocation(e,t),a==null)return{location:n,value:null};const u=this.identifyPixelLocation(n,a,null);if(u===null)return{location:n,value:null};const{row:o,col:l,rowOffset:c,colOffset:h}=u,m=Oe(this.url,t.sliceId),f=`${a}/${o}/${l}`;let y=$e(m,null,f);A(y)&&(y=this.fetchRawTile(a,o,l,t),De(m,null,f,y));const p=await y;if(A(p)||!p.pixels||p.pixels.length===0)return{location:n,value:null};const d=c*this.rasterInfo.storageInfo.blockHeight+h,g=!p.mask||p.mask[d]?p.pixels.map(w=>w[d]):null,x=this.rasterInfo.dataType;return(x==="vector-magdir"||x==="vector-uv")&&g?.length>1?{location:n,value:g,magdirValue:x==="vector-magdir"?[g[0],g[1]]:at([g[0],g[1]]),pyramidLevel:a}:{location:n,value:g,pyramidLevel:a}}async fetchPixels(e,t,i,s={}){e=Vt(e);const r=Ae(e.spatialReference),n=ve(e),a=Ae(this.rasterInfo.spatialReference),u=P(a)&&this.rasterInfo.extent.width>=a/2;if(s=this._getRequestOptionsWithSliceId(s),A(r)||n===0||n===1&&u)return this._fetchPixels(e,t,i,s);if(n>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:l,xmax:c}=e,h=Math.round(r/(c-l)*t),m=h-Math.round((r/2-l)/(c-l)*t);let f=0;const y=[];for(let x=0;x<=n;x++){const w=new L({xmin:x===0?l:-r/2,xmax:x===n?c-r*x:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),k=x===0?h-m:x===n?t-f:h;f+=k,y.push(k);const v=this._fetchPixels(w,k,i,s);o.push(v)}const p=(await Promise.all(o)).map(x=>x?.pixelBlock);let d=null;const g={width:t,height:i};return d=this.rasterJobHandler?await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:g,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:y},s):Pe(p,g,{blockWidths:y}),{extent:e,srcExtent:be(e,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:d}}async fetchRawPixels(e,t,i,s){const{origin:r,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:u}=this.getBlockWidthHeight(e);let{x:o,y:l}=t,{width:c,height:h,wrapCount:m}=i;const f=V(this._getRasterTileAlignmentInfo(e,0));s.buffer&&(o-=s.buffer.cols,l-=s.buffer.rows,c+=2*s.buffer.cols,h+=2*s.buffer.rows);const y=Math.floor(o/a),p=Math.floor(l/u),d=Math.floor((o+c-1)/a),g=Math.floor((l+h-1)/u),x=n[e];if(!x)return null;const{minRow:w,minCol:k,maxCol:v,maxRow:T}=x;if(m===0&&(g<w||d<k||p>T||y>v))return null;const b=new Array;let C=!1;const R=this.ioConfig.allowPartialFill==null?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let W=p;W<=g;W++)for(let _=y;_<=d;_++){const X=m===0||f==null||_<f.worldColumnCountFromOrigin?_:_%f.worldColumnCountFromOrigin-f.originColumnOffset;if(W>=w&&X>=k&&T>=W&&v>=X){const D=this._fetchRawTile(e,W,X,s);R?b.push(new Promise(K=>{D.then(Ye=>K(Ye)).catch(()=>{C=!0,K(null)})})):b.push(D)}else b.push(null)}if(b.length===0)return null;const M=await Promise.all(b),E={height:(g-p+1)*u,width:(d-y+1)*a},{spatialReference:F}=this.rasterInfo,J=this.getPyramidPixelSize(e),{x:B,y:ie}=J;return{extent:new L({xmin:r.x+y*a*B,xmax:r.x+(d+1)*a*B,ymin:r.y-(g+1)*u*ie,ymax:r.y-p*u*ie,spatialReference:F}),pixelBlocks:M,mosaicSize:E,isPartiallyFilled:C}}fetchRawTile(e,t,i,s){throw new $("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return be(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?ot(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){var s,r;const{customFetchParameters:n}=this.ioConfig,{range:a,query:u,headers:o}=t;i=(s=(r=i)!=null?r:t.retryCount)!=null?s:this.ioConfig.retryCount;const l=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await Ue(e,{...t,query:{...u,...n},headers:{...o,...l}})}catch(c){if(i>0)return i--,this.request(e,t,i);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!P(t)||!P(e)||e.length===0)return null;let i=0;const s=e[0].variableName;for(let r=0;r<t.variables.length;r++){const n=t.variables[r],a=n.dimensions;if(n.name!==s){i+=a.map(l=>this._getDimensionValuesCount(l)).reduce((l,c)=>l+c);break}const u=a.map(l=>this._getDimensionValuesCount(l)),o=a.length;for(let l=0;l<o;l++){const c=e.filter(f=>f.dimensionName===a[l].name)[0];if(c==null)return null;const h=Array.isArray(c.values[0])?c.values[0][0]:c.values[0],m=this._getIndexFromDimensions(h,a[l]);if(m===-1)return null;u.shift(),i+=l===o-1?m:m*u.reduce((f,y)=>f+y)}}return i}getTileExtentFromTileInfo(e,t,i,s){const r=s.lodAt(e);return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:s}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let a=Math.max(s.x,s.y),u=1/.0254*96*a;for(let l=0;l<=n;l++)r.push({level:n-l,resolution:a,scale:u}),a*=2,u*=2;const o=new N({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new ne({origin:o,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,s){const{width:r,height:n,nativeExtent:a,pixelSize:u,spatialReference:o}=e,l=new N({x:a.xmin,y:a.ymax,spatialReference:o});s==null&&(s=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const c=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[u],s);e.storageInfo=new fe({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:l,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:c})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,s,r,n=0,a=2){if(r.length===1&&n>0){r=[...r];let{x:c,y:h}=r[0];for(let m=0;m<n;m++)c*=a,h*=a,r.push({x:c,y:h})}const u=[],{x:o,y:l}=s;for(let c=0;c<r.length;c++){const{x:h,y:m}=r[c];u.push({minCol:Math.floor((e.xmin-o+.1*h)/t/h),maxCol:Math.floor((e.xmax-o-.1*h)/t/h),minRow:Math.floor((l-e.ymax+.1*m)/i/m),maxRow:Math.floor((l-e.ymin-.1*m)/i/m)})}return u}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(e===0)return t;if(P(i)&&i.length)return i[e-1];const r=s**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i){const{spatialReference:s,nativeExtent:r}=this.rasterInfo,{blockWidth:n,blockHeight:a,maximumPyramidLevel:u,origin:o}=this.rasterInfo.storageInfo,l=Be(e,s,i);if(!r.intersects(l)||t<0||t>u)return null;const c=this.getPyramidPixelSize(t),{x:h,y:m}=c,f=(o.y-l.y)/m/a,y=(l.x-o.x)/h/n,p=Math.min(a-1,Math.floor((f-Math.floor(f))*a)),d=Math.min(n-1,Math.floor((y-Math.floor(y))*n));return{pyramidLevel:t,row:Math.floor(f),col:Math.floor(y),rowOffset:p,colOffset:d,srcLocation:l}}getTileExtent(e,t,i,s,r,n){const[a,u]=n,o=s.x+i*a*e.x,l=o+a*e.x,c=s.y-t*u*e.y,h=c-u*e.y;return new L({xmin:o,xmax:l,ymin:h,ymax:c,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const s=this.rasterInfo.storageInfo.blockBoundary[e];return!s||s.maxRow<t||s.maxCol<i||s.minRow>t||s.minCol>i}async _fetchPixels(e,t,i,s={}){let r=ve(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,i,s),{pyramidLevel:a,pyramidResolution:u,srcResolution:o,srcExtent:l,srcWidth:c,srcHeight:h}=n;if(c===0||h===0)return{extent:e,srcExtent:l,pixelBlock:null};const m=V(this.rasterInfo.transform);m?.type==="gcs-shift"&&(r=ve(n.srcExtent,!0));const f=this.rasterInfo.storageInfo,y={x:Math.floor((l.xmin-f.origin.x)/u.x+.1),y:Math.floor((f.origin.y-l.ymax)/u.y+.1)},p=await this.fetchRawPixels(a,y,{width:c,height:h,wrapCount:r},s);if(!p)return{extent:e,srcExtent:l,pixelBlock:null};const d=a>0?f.pyramidBlockWidth:f.blockWidth,g=a>0?f.pyramidBlockHeight:f.blockHeight,x=d===c&&g===h&&y.x%d==0&&y.y%g==0,w=new N({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),k=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:v}=s;if(!k&&x&&p.pixelBlocks.length===1&&d===t&&g===i&&o.x===w.x&&o.y===w.y)return{extent:e,srcExtent:l,pixelBlock:p.pixelBlocks[0]};const T=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:p.extent,pixelSize:w.toJSON(),datumTransformation:v,rasterTransform:m,hasWrapAround:r>0,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1},s):Yt({projectedExtent:e,srcBufferExtent:p.extent,pixelSize:w,datumTransformation:v,rasterTransform:m,hasWrapAround:r>0,isAdaptive:!1});let b;const C=!s.requestRawData,R={rows:T.spacing[0],cols:T.spacing[1]},M=V(this._getRasterTileAlignmentInfo(a,p.extent.xmin)),{pixelBlocks:E,mosaicSize:F,isPartiallyFilled:J}=p;if(this.rasterJobHandler)b=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:E,srcMosaicSize:F,destDimension:C?{width:t,height:i}:null,coefs:C?T.coefficients:null,sampleSpacing:C?R:null,interpolation:s.interpolation,alignmentInfo:M,blockWidths:null},s);else{const B=Pe(E,F,{alignmentInfo:M});b=C?lt(B,{width:t,height:i},T.coefficients,R,s.interpolation):B}return s.requestRawData?{srcExtent:l,pixelBlock:b,transformGrid:T,extent:e,isPartiallyFilled:J}:{srcExtent:l,extent:e,pixelBlock:b}}_fetchRawTile(e,t,i,s){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:u,maxRow:o}=r;if(t<n||i<a||t>o||i>u)return Promise.resolve(null);const l=Oe(this.url,s.sliceId),c=`${e}/${t}/${i}`;let h=$e(l,s.registryId,c);if(A(h)){const m=new AbortController;h=this.fetchRawTile(e,t,i,{...s,signal:m.signal}),De(l,s.registryId,c,h,m),h.catch(()=>jt(l,s.registryId,c))}return s.signal&&ut(s,()=>{Ut(l,s.registryId,c)}),h}_getIndexFromDimensions(e,t){const{extent:i,interval:s,unit:r,values:n}=t;if(n!=null&&n.length)return Array.isArray(n[0])?n.findIndex(l=>l[0]<=e&&l[1]>=e):n.indexOf(e);if(e>i[1])return-1;const a=i[0];let u=-1;if(r==="ISO8601"){var o;switch(((o=t.intervalUnit)==null?void 0:o.toLowerCase())||"seconds"){case"seconds":u=Math.round((e-a)/1e3/s);break;case"minutes":u=Math.round((e-a)/6e4/s);break;case"hours":u=Math.round((e-a)/36e5/s);break;case"days":u=Math.round((e-a)/864e5/s);break;case"years":u=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/s);break;case"decades":u=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/10/s)}return u}return Math.round((e-a)/s)}_getDimensionValuesCount(e){const{extent:t,interval:i,unit:s,values:r}=e;let n=r?.length||0;if(n)return n;const a=t[0];if(n===0&&s==="ISO8601"){var u;switch(((u=e.intervalUnit)==null?void 0:u.toLowerCase())||"seconds"){case"seconds":n=Math.round((t[1]-t[0])/1e3/i);break;case"minutes":n=Math.round((t[1]-t[0])/6e4/i);break;case"hours":n=Math.round((t[1]-t[0])/36e5/i);break;case"days":n=Math.round((t[1]-t[0])/864e5/i);break;case"years":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return n}return Math.round((t[1]-t[0])/i)}_getRasterTileAlignmentInfo(e,t){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=Xt(this.rasterInfo)),P(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}:null}_getSourceDataInfo(e,t,i,s={}){const r={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};s.srcResolution&&(r.srcResolution=s.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:u,pyramidLevel:o}=r,l=a/t,c=u/i,h=o<n&&l*c>=16;if(h||o===n&&(l>pe||c>pe)||a===0||u===0){const m=new N({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let f=Kt(m,this.rasterInfo.spatialReference,e,r.datumTransformation);const y=!f||s.srcResolution&&f.x+f.y<s.srcResolution.x+s.srcResolution.y;if(h&&s.srcResolution&&y){const p=Math.round(Math.log(Math.max(l,c))/Math.LN2)-1;if(n-o+3>=p){const d=2**p;f={x:s.srcResolution.x*d,y:s.srcResolution.y*d}}}f&&(r.srcResolution=f,this._updateSourceDataInfo(e,r))}return(r.srcWidth/t>pe||r.srcHeight/i>pe)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:a,excessiveReading:u}=Ee(s,this.rasterInfo,this.ioConfig.sampling);if(u)return;let o=t.srcExtent||be(e,i,r);if(o==null)return;const l=V(this.rasterInfo.transform);l&&(o=l.inverseTransform(o)),t.srcExtent=o;const c=Math.ceil((o.xmax-o.xmin)/a.x-.1),h=Math.ceil((o.ymax-o.ymin)/a.y-.1);t.pyramidLevel=n,t.pyramidResolution=a,t.srcWidth=c,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return P(this.rasterInfo.multidimensionalInfo)&&e.sliceId==null&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}};I([S()],q.prototype,"_rasterTileAlighmentInfo",void 0),I([S(We)],q.prototype,"url",null),I([S({type:String,json:{write:!0}})],q.prototype,"datasetName",void 0),I([S({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),I([S()],q.prototype,"rasterInfo",void 0),I([S()],q.prototype,"ioConfig",void 0),I([S()],q.prototype,"sourceJSON",void 0),q=I([Y("esri.layers.support.rasterDatasets.BaseRaster")],q);const oe=q;function ii(e){const t=e.fields,i=e.records,s=t.some(l=>l.name.toLowerCase()==="oid")?"OBJECTID":"OID",r=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map(l=>({name:l.name,type:"esriFieldType"+l.typeName,alias:l.name}))),n=r.map(l=>l.name),a=[];let u=0,o=0;return i.forEach(l=>{const c={};for(c[s]=u++,o=1;o<n.length;o++)c[n[o]]=l[o-1];a.push({attributes:c})}),{displayFieldName:"",fields:r,features:a}}class si{static get supportedVersions(){return[5]}static parse(t){const i=new DataView(t),s=3&i.getUint8(0);if(s!==3)return{header:{version:s},recordSet:null};const r=i.getUint32(4,!0),n=i.getUint16(8,!0),a=i.getUint16(10,!0),u={version:s,recordCount:r,headerByteCount:n,recordByteCount:a};let o=32;const l=[],c=[];let h;if(s===3){for(;i.getUint8(o)!==13;)h=String.fromCharCode(i.getUint8(o+11)).trim(),l.push({name:Fe(new Uint8Array(t,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:i.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<r&&t.byteLength-o>a;){const m=[];i.getUint8(o)===32?(o+=1,l.forEach(f=>{if(f.type==="C")m.push(Fe(new Uint8Array(t,o,f.length)).trim());else if(f.type==="N")m.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,o,f.length)).trim(),10));else if(f.type==="F")m.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,o,f.length)).trim()));else if(f.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(t,o,f.length)).trim();m.push(new Date(parseInt(y.substring(0,4),10),parseInt(y.substring(4,6),10)-1,parseInt(y.substring(6,8),10)))}o+=f.length}),c.push(m)):o+=a}}return{header:u,fields:l,records:c,recordSet:ii({fields:l,records:c})}}}const Q=new Map;Q.set("int16","esriFieldTypeSmallInteger"),Q.set("int32","esriFieldTypeInteger"),Q.set("int64","esriFieldTypeInteger"),Q.set("float32","esriFieldTypeSingle"),Q.set("float64","esriFieldTypeDouble"),Q.set("text","esriFieldTypeString");const Ne=8;let le=class extends oe{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new $("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(t);if(s.dataType==="thematic"){const r=await this._fetchAuxiliaryInformation();s.attributeTable=r}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,s={}){const r=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(r<0)return null;const n=this._buildCacheFilePath(r,t,i,s.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,i),u=await this.request(n,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!u)return null;const o=new Uint8Array(u.data),l=this._getTileEndAndContentType(o,a);if(l.recordSize===0)return null;const c=await this.request(n,{range:{from:l.position,to:l.position+l.recordSize},responseType:"array-buffer",signal:s.signal});return c?this.decodePixelBlock(c.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!t.some(i=>!e[i])}_parseHeader(e){var t,i;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:n,colormap:a,blockWidth:u,blockHeight:o,firstPyramidLevel:l,maximumPyramidLevel:c}=e,h=e.statistics&&e.statistics.map(D=>({min:D.min,max:D.max,avg:D.mean,stddev:D.standardDeviation,median:D.median,mode:D.mode})),m=e.extent.spatialReference,f=(t=e.geodataXform)==null?void 0:t.spatialReference,y=new G(m!=null&&m.wkid||m!=null&&m.wkt?m:f);let p=new L({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:y});const d=new N({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:y}),g=Math.round((p.xmax-p.xmin)/d.x),x=Math.round((p.ymax-p.ymin)/d.y),w=this._parseTransform(e.geodataXform),k=w?p:null;w&&(p=w.forwardTransform(p),d.x=(p.xmax-p.xmin)/g,d.y=(p.ymax-p.ymin)/x);const v=(i=e.properties)!=null?i:{},T=e.format.toLowerCase().replace("cache/",""),b=new N(e.origin.x,e.origin.y,y);let C,R,M,E;if(a&&a.colors)for(C=[],R=0;R<a.colors.length;R++)M=a.colors[R],E=a.values?a.values[R]:R,C.push([E,255&M,M<<16>>>24,M<<8>>>24,M>>>24]);const F=e.LODInfos,J=[];for(R=0;R<F.levels.length;R++)J.push({level:F.levels[R],resolution:F.resolutions[R],scale:96/.0254*F.resolutions[R]});const B=new ne({dpi:96,lods:J,format:T,origin:b,size:[u,o],spatialReference:y}),ie={recordSize:Ne,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*Ne+64},W=[{maxCol:Math.ceil(g/u)-1,maxRow:Math.ceil(x/o)-1,minCol:0,minRow:0}];let _=2;if(c>0)for(R=0;R<c;R++)W.push({maxCol:Math.ceil(g/_/u)-1,maxRow:Math.ceil(x/_/o)-1,minCol:0,minRow:0}),_*=2;const X=e.mdInfo;return{storageInfo:ie,rasterInfo:new re({width:g,height:x,pixelType:s,bandCount:r,extent:p,nativeExtent:k,transform:w,spatialReference:y,pixelSize:d,keyProperties:v,statistics:h,histograms:n,multidimensionalInfo:X,colormap:C,storageInfo:new fe({blockWidth:u,blockHeight:o,pyramidBlockWidth:u,pyramidBlockHeight:o,origin:b,tileInfo:B,firstPyramidLevel:l,maximumPyramidLevel:c,blockBoundary:W})})}}_parseTransform(e){var t,i;if(!Zt(e))throw new $("cloudraster:open","the data contains unsupported geodata transform types");const s=Qt(e);if(s.type==="identity")return null;if(s.type!=="polynomial"||(t=s.forwardCoefficients)==null||!t.length||(i=s.inverseCoefficients)==null||!i.length)throw new $("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return s}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then(n=>n.data).catch(()=>null),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(n=>n.data).catch(()=>null),s=await Promise.all([t,i]);let r;if(s[0]){let n=s[0].fields;const a=s[0].values;if(n&&a){n=n.map(o=>({type:o.name==="OID"?"esriFieldTypeOID":Q.get(o.type),name:o.name,alias:o.alias||o.name}));const u=a.map(o=>({attributes:o}));n&&a&&(r={fields:n,features:u})}}return!r&&s[1]&&(r=si.parse(s[1]).recordSet),Ge.fromJSON(r)}_buildCacheFilePath(e,t,i,s){const r=this.storageInfo.packetSize,n=Math.floor(t/r)*r,a=Math.floor(i/r)*r,u="R"+this._toHexString4(n)+"C"+this._toHexString4(a);let o="L";o+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:l}=this.rasterInfo,c=s?.[0];if(!P(l)||!c)return`${this.url}/_alllayers/${o}/${u}.bundle`;let h=l.variables.filter(f=>f.name===c.variableName)[0].dimensions[0].values.indexOf(c.values[0]).toString(16);const m=4-h.length;for(let f=0;f<m;f++)h="0"+h;return h="S"+h,`${this.url}/_alllayers/${c.variableName}/${h}/${o}/${u}.bundle`}_getIndexRecordFromBundle(e,t){const i=this.storageInfo.packetSize,s=i*(e%i)+t%i;if(s<0)throw"Invalid level / row / col";return 20+s*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let s,r=0;for(s=0;s<5;s++)r|=(255&i[s])<<8*s;const n=0xffffffffff&r;for(r=0,s=5;s<8;s++)r|=(255&i[s])<<8*(s-5);return{position:n,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(t.length!==4){let i=4-t.length;for(;i-- >0;)t="0"+t}return t}};I([S({readOnly:!0})],le.prototype,"storageInfo",void 0),I([S({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=I([Y("esri.layers.support.rasterDatasets.CloudRaster")],le);const ni=le;let ue=class extends oe{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:i,statistics:s,histograms:r,name:n,keyProperties:a,nativeExtent:u,transform:o}=this.data,{width:l,height:c,pixelType:h}=i,m=this.data.extent||new L({xmin:-.5,ymin:.5,xmax:l-.5,ymax:c-.5,spatialReference:new G({wkid:3857})}),f=(t=this.data.isPseudoSpatialReference)!=null?t:!this.data.extent,y={x:m.width/l,y:m.height/c},p=new re({width:l,height:c,pixelType:h,extent:m,nativeExtent:u,transform:o,pixelSize:y,spatialReference:m.spatialReference,bandCount:3,keyProperties:a||{},statistics:s,isPseudoSpatialReference:f,histograms:r});this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=n,this.url="/InMemory/"+n}fetchRawTile(e,t,i,s={}){const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,t,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s},i):Promise.resolve(ct(e,t,s)),n=P(this.rasterInfo.statistics),a=P(this.rasterInfo.histograms),u=n&&a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(ht(e)),o=await Ve([r,u]);if(!o[0].value&&o[1].value)throw new $("inmemory-raster:open","failed to build in memory raster");var l,c;this._pixelBlockTiles=o[0].value,n||(this.rasterInfo.statistics=(l=o[1].value)==null?void 0:l.statistics),a&&(this.rasterInfo.histograms=(c=o[1].value)==null?void 0:c.histograms)}};I([S({type:String,json:{write:!0}})],ue.prototype,"datasetFormat",void 0),I([S()],ue.prototype,"data",void 0),ue=I([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],ue);const ri=ue;function ae(e,t){if(!e||!t)return[];let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=[];if(t){const n=ae(e,i);for(let a=0;a<n.length;a++)ae(n[a],t).forEach(u=>s.push(u));return s}const r=e.getElementsByTagNameNS("*",i);if(!r||r.length===0)return[];for(let n=0;n<r.length;n++)s.push(r[n]||r.item[n]);return s}function z(e,t){if(!e||!t)return null;let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=ae(e,i);return s.length>0?t?z(s[0],t):s[0]:null}function U(e,t=null){const i=t?z(e,t):e;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function ai(e,t){const i=ae(e,t),s=[];let r;for(let n=0;n<i.length;n++)r=i[n].textContent||i[n].nodeValue,r&&(r=r.trim(),r!==""&&s.push(r));return s}function ye(e,t){return ai(e,t).map(i=>Number(i))}function te(e,t){const i=U(e,t);return Number(i)}function Se(e,t){var i;const s=e==null||(i=e.nodeName)==null?void 0:i.toLowerCase(),r=t.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===r}function ze(e,t){if(!e||!t)return null;const i=[];for(let s=0;s<e.length;s++)i.push(e[s]),i.push(t[s]);return i}function oi(e){var t;const i=z(e,"GeodataXform"),s=we(te(i,"SpatialReference/WKID")||U(i,"SpatialReference/WKT"));if(i.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const r=(t=te(i,"PolynomialOrder"))!=null?t:1,n=ye(i,"CoeffX/Double"),a=ye(i,"CoeffY/Double"),u=ye(i,"InverseCoeffX/Double"),o=ye(i,"InverseCoeffY/Double"),l=ze(n,a),c=ze(u,o);return{spatialReference:s,transform:new Ce({spatialReference:s,polynomialOrder:r,forwardCoefficients:l,inverseCoefficients:c})}}function li(e){var t;const i=te(e,"NoDataValue"),s=z(e,"Histograms/HistItem"),r=te(s,"HistMin"),n=te(s,"HistMax"),a=te(s,"BucketCount"),u=(t=U(s,"HistCounts"))==null?void 0:t.split("|").map(f=>Number(f));let o,l,c,h;ae(e,"Metadata/MDI").forEach(f=>{var y;const p=Number((y=f.textContent)!=null?y:f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=p;break;case"STATISTICS_MAXIMUM":l=p;break;case"STATISTICS_MEAN":c=p;break;case"STATISTICS_STDDEV":h=p}});const m=te(e,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:u!=null&&u.length&&o!=null&&l!=null?{min:r,max:n,size:a||u.length,counts:u}:null,sourceBandIndex:m,statistics:o!=null&&l!=null?{min:o,max:l,avg:c,stddev:h}:null}}function we(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&t!==0)return new G({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),s=e.indexOf("PROJCS"),r=s>-1?s:e.indexOf("GEOGCS");if(r===-1)return null;const n=e.slice(r,e.lastIndexOf("]",i)+1).trim(),a=e.slice(i,e.lastIndexOf("]")).trim();t=Te(n);const u=new G(t?{wkid:t}:{wkt:n}),o=Te(a);return o&&(u.vcsWkid=o),u}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=Te(e),new G(t!==0?{wkid:t}:{wkt:e})):null}function Te(e){var t;const i=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(n=>n.trim()).filter(n=>n!==""),s=i[i.length-1].split(","),r=(t=s[0])==null?void 0:t.toLowerCase();if((r==="epsg"||r==="esri")&&e.endsWith('"]]')){const n=Number(s[1]);if(!isNaN(n)&&n!==0)return n}return 0}function ke(e){var t;if((e==null||(t=e.documentElement.tagName)==null?void 0:t.toLowerCase())!=="pamdataset")return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach(r=>{if(r.nodeType===1){if(Se(r,"SRS")){if(!i.spatialReference){const n=U(r);i.spatialReference=we(n)}}else if(Se(r,"Metadata"))if(r.getAttribute("domain")==="xml:ESRI"){const{spatialReference:n,transform:a}=oi(r);i.transform=a,i.spatialReference||(i.spatialReference=n)}else ae(r,"MDI").forEach(n=>i.metadata[n.getAttribute("key")]=U(n));else if(Se(r,"PAMRasterBand")){const n=li(r);n.sourceBandIndex!=null&&i.rasterBands[n.sourceBandIndex]==null?i.rasterBands[n.sourceBandIndex]=n:i.rasterBands.push(n)}}});const s=i.rasterBands;if(s){const r=!!s[0].statistics;i.statistics=r?s.map(a=>a.statistics):null;const n=!!s[0].histogram;i.histograms=n?s.map(a=>a.histogram):null}return i}let Ie=class extends oe{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:s,histograms:r,transform:n}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new G({wkid:3857})),r!=null&&r.length&&s==null&&(s=Re(r));const{width:u,height:o}=t;let l=new L({xmin:-.5,ymin:.5-o,xmax:u-.5,ymax:.5,spatialReference:i});const c=n?n.forwardTransform(l):l;let h=!0;if(n){const f=n.forwardCoefficients;h=f&&f[1]===0&&f[2]===0,h&&(n=null,l=c)}const m=new ri({data:{extent:c,nativeExtent:l,transform:n,pixelBlock:t,statistics:s,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await m.open(),this._set("rasterInfo",m.rasterInfo),this._inMemoryRaster=m}fetchRawTile(e,t,i,s={}){return this._inMemoryRaster.fetchRawTile(e,t,i,s)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=ft(t).toUpperCase();if(i!=="JPG"&&i!=="PNG"&&i!=="GIF"&&i!=="BMP")throw new $("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,i;const s=V(e?.signal),r=(t=this.ioConfig.skipExtensions)!=null?t:[],n=r.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),a=this.datasetFormat,u=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,o=r.indexOf(u)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+u,{responseType:"text",signal:s}),l=await Ve([n,o]);if(s!=null&&s.aborted)throw dt();const c=ke((i=l[0].value)==null?void 0:i.data);if(!c.transform){const h=l[1].value?l[1].value.data.split(`
`).slice(0,6).map(m=>Number(m)):null;c.transform=h?.length===6?new Ce({forwardCoefficients:[h[4],h[5],h[0],-h[1],h[2],-h[3]]}):null}return c}};I([S({type:String,json:{write:!0}})],Ie.prototype,"datasetFormat",void 0),Ie=I([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],Ie);const ge=Ie;let ce=class extends oe{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new $("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new $("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const r=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,this.tileType==null&&(r.indexOf(s.tileInfo.format.toLowerCase())>-1?this.tileType="Map":s.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name.slice(s.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:t});if(!P(n))throw new $("image-server-raster:open","cannot initialize image service");{const a=this.tileType==="Map"?mt(s.tileInfo,s):ne.fromJSON(s.tileInfo),{extent:u,pixelSize:o}=n,l=.5/n.width*o.x;let c,h;const m=a.lodAt(Math.max.apply(null,a.lods.map(v=>v.level)));this.tileType!=="Map"&&s.maxScale!==0&&(this.tileType==="Raster"?(c=a.lods.filter(v=>v.resolution===o.x)[0],c||(c=a.lods[a.lods.length-1])):(c=a.lods.filter(v=>Math.abs(v.scale-s.maxScale)<l)[0],c||(c=a.lods.filter(v=>v.scale>s.maxScale).sort((v,T)=>v.scale>T.scale?1:-1)[0])),o.x=o.y=c.resolution,n.width=Math.ceil((u.xmax-u.xmin)/o.x-.1),n.height=Math.ceil((u.ymax-u.ymin)/o.y-.1)),c||(c=m);const f=a.lodAt(Math.min.apply(null,a.lods.map(v=>v.level)));this.tileType==="Map"?this._levelOffset=a.lods[0].level:s.minScale!==0&&this.tileType==="Elevation"&&(h=a.lods.filter(v=>Math.abs(v.scale-s.minScale)<l)[0],this._levelOffset=h.level-f.level),h||(h=f);const y=Math.max(o.x,o.y);(Math.abs(o.x-o.y)>l||!a.lods.some(v=>Math.abs(v.resolution-y)<l))&&(o.x=o.y=c.resolution,n.width=Math.ceil((u.xmax-u.xmin)/o.x-.1),n.height=Math.ceil((u.ymax-u.ymin)/o.y-.1));const p=c.level-h.level,[d,g]=a.size,x=[];a.lods.forEach(v=>{v.level>=h.level&&v.level<=c.level&&x.push({x:v.resolution,y:v.resolution})}),x.sort((v,T)=>v.x-T.x);const w=this.computeBlockBoundary(u,d,g,a.origin,x,p),k=x.length>1?x.slice(1):null;n.storageInfo=new fe({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:k,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:a,blockBoundary:w}),this._fixGCSShift(n),this._set("rasterInfo",n)}if(s.capabilities.toLowerCase().indexOf("tilemap")>-1){const a={tileInfo:n.storageInfo.tileInfo,parsedUrl:pt(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new yt({layer:a})}}async fetchRawTile(e,t,i,s={}){if(this._slices&&s.sliceId==null)return null;const{storageInfo:r,extent:n}=this.rasterInfo,a=r.maximumPyramidLevel-e+this._levelOffset,u=`${this.url}/tile/${a}/${t}/${i}`,o=this._slices?{sliceId:s.sliceId||0}:null,{data:l}=await this.request(u,{query:o,responseType:"array-buffer",signal:s.signal});if(!l)return null;const c=await this.decodePixelBlock(l,{width:r.tileInfo.size[0],height:r.tileInfo.size[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation"}),h=r.blockBoundary[e];if(r.compression!=="jpg"||i>h.minCol&&i<h.maxCol&&t>h.minRow&&t<h.maxRow)return c;const{origin:m,blockWidth:f,blockHeight:y}=r,{x:p,y:d}=this.getPyramidPixelSize(e),g=Math.round((n.xmin-m.x)/p)%f,x=Math.round((n.xmax-m.x)/p)%f,w=Math.round((m.y-n.ymax)/d)%y,k=Math.round((m.y-n.ymin)/d)%y,v=i===h.minCol?g:0,T=t===h.minRow?w:0,b=i===h.maxCol?x:f,C=t===h.maxRow?k:y;return gt(c,{x:v,y:T},{width:b-v,height:C-T}),c}getSliceIndex(e){if(!this._slices||A(e)||e.length===0)return null;const t=e;for(let i=0;i<this._slices.length;i++){const s=this._slices[i].multidimensionalDefinition;if(s.length===t.length&&!s.some(r=>{const n=t.filter(a=>r.variableName===a.variableName&&a.dimensionName===r.dimensionName)[0];return n?(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0])!==(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0]):!0}))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then(n=>{var a;return(a=n.data)==null?void 0:a.statistics}),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then(n=>{var a;return(a=n.data)==null?void 0:a.histograms}),r=await Promise.all([i,s]);return r[0]&&r[0].forEach(n=>{n.avg=n.mean,n.stddev=n.standardDeviation}),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,V(t.datumTransformation));if(i===null)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let n=r-s+this._levelOffset;const a=i.srcLocation;for(;n>=0;){try{if(await this._tilemapCache.fetchAvailability(n,i.row,i.col,t)==="available")break}catch{}if(n--,s++,i=this.identifyPixelLocation(a,s,V(t.datumTransformation)),i===null)return null}return n===-1||i==null?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),r=G.fromJSON(t.spatialReference||t.extent.spatialReference);if(this.tileType==="Map")return new re({width:i,height:s,bandCount:3,extent:L.fromJSON(t.extent),spatialReference:r,pixelSize:new N({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:n,signal:a}=e,u=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:n,f:"json"},signal:a}).then(f=>Ge.fromJSON(f.data)).catch(()=>null),o=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:n,f:"json"},signal:a}).then(f=>{var y;return(y=f.data)==null?void 0:y.colormap}),l=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:n,f:"json"},signal:a}).then(f=>{var y;return(y=f.data)==null?void 0:y.histograms}),c=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:a}).then(f=>f.data).catch(()=>{}),h=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),m=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:a}).then(f=>f.data&&f.data.slices).catch(()=>{});return Promise.all([u,o,l,c,h,m]).then(f=>{let y=null;if(t.minValues&&t.minValues.length===t.bandCount){y=[];for(let p=0;p<t.minValues.length;p++)y.push({min:t.minValues[p],max:t.maxValues[p],avg:t.meanValues[p],stddev:t.stdvValues[p]})}return this._slices=f[5]||null,new re({width:i,height:s,bandCount:t.bandCount,extent:L.fromJSON(t.extent),spatialReference:r,pixelSize:new N({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r}),pixelType:t.pixelType.toLowerCase(),statistics:y,attributeTable:f[0]||null,colormap:f[1]||null,histograms:f[2]||null,keyProperties:f[3]||{},multidimensionalInfo:f[4]||null})})}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then(s=>{var r;return(r=s.data)==null?void 0:r.multidimensionalInfo});return(t=i.variables)!=null&&t.length&&i.variables.forEach(s=>{var r;(r=s.statistics)!=null&&r.length&&s.statistics.forEach(n=>{n.avg=n.mean,n.stddev=n.standardDeviation})}),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin===0&&t.xmax===360&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new ei,e.extent=e.transform.forwardTransform(t))}};I([S({type:String,json:{write:!0}})],ce.prototype,"datasetFormat",void 0),I([S()],ce.prototype,"tileType",void 0),ce=I([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],ce);const ui=ce,j=new Map;j.set("Int8","s8"),j.set("UInt8","u8"),j.set("Int16","s16"),j.set("UInt16","u16"),j.set("Int32","s32"),j.set("UInt32","u32"),j.set("Float32","f32"),j.set("Float64","f32"),j.set("Double64","f32");const Z=new Map;Z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let se=class extends oe{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var t;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=e?V(e.signal):null,s=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:r,files:n}=this._parseHeader(s.data);if(((t=this.ioConfig.skipExtensions)==null?void 0:t.indexOf("aux.xml"))===-1){const g=await this._fetchAuxiliaryData(e);var a;g!=null&&(r.statistics=(a=g.statistics)!=null?a:r.statistics,r.histograms=g.histograms,g.histograms&&!P(r.statistics)&&(r.statistics=Re(g.histograms)))}this._set("rasterInfo",r),this._files=n;const u=await this.request(n.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(u.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:m}=this.rasterInfo,f=[],y=this._getBandSegmentCount();let p=0,d=-1;for(;p<this._storageIndex.length;){d++;const g=Math.ceil(h/o/c**d)-1,x=Math.ceil(m/l/c**d)-1;p+=1*g*(1*x)*y*4,f.push({maxRow:x,maxCol:g,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){const{blockWidth:r,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,u=a[e];if(!u||u.maxRow<t||u.maxCol<i||u.minRow>t||u.minCol>i)return null;const{bandCount:o,pixelType:l}=this.rasterInfo,{ranges:c,actualTileWidth:h,actualTileHeight:m}=this._getTileLocation(e,t,i);if(!c||c.length===0)return null;if(c[0].from===0&&c[0].to===0){const R=new Uint8Array(r*n);return new xt({width:r,height:n,pixels:null,mask:R,validPixelCount:0})}const{bandIds:f}=this.ioConfig,y=this._getBandSegmentCount(),p=[];let d=0;for(d=0;d<y;d++)(!f||f.indexOf[d]>-1)&&p.push(this.request(this._files.data,{range:{from:c[d].from,to:c[d].to},responseType:"array-buffer",signal:s.signal}));const g=await Promise.all(p),x=g.map(R=>R.data.byteLength).reduce((R,M)=>R+M),w=new Uint8Array(x);let k=0;for(d=0;d<y;d++)w.set(new Uint8Array(g[d].data),k),k+=g[d].data.byteLength;const v=Z.get(this.rasterInfo.storageInfo.compression).decoderFormat,T=await this.decodePixelBlock(w.buffer,{width:r,height:n,format:v,planes:f?.length||o,pixelType:l});if(P(this.rasterInfo.noDataValue)&&v!=="lerc"&&!T.mask){const R=this.rasterInfo.noDataValue[0];if(R!=null){const M=T.width*T.height,E=new Uint8Array(M);if(Math.abs(R)>1e24)for(d=0;d<M;d++)Math.abs((T.pixels[0][d]-R)/R)>1e-6&&(E[d]=1);else for(d=0;d<M;d++)T.pixels[0][d]!==R&&(E[d]=1);T.mask=E}}let b=0,C=0;if(h!==r||m!==n){let R=T.mask;if(R)for(d=0;d<n;d++)if(C=d*r,d<m)for(b=h;b<r;b++)R[C+b]=0;else for(b=0;b<r;b++)R[C+b]=0;else for(R=new Uint8Array(r*n),T.mask=R,d=0;d<m;d++)for(C=d*r,b=0;b<h;b++)R[C+b]=1}return T}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,s,r,n,a;if(It){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),s=new Uint8Array(r),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)s[4*n+a]=i[4*n+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:s,blockHeight:r,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:u}=this.rasterInfo,o=this._getBandSegmentCount();let l,c,h,m=0,f=0;for(h=0;h<e;h++)f=n**h,l=Math.ceil(a/s/f),c=Math.ceil(u/r/f),m+=l*c;f=n**e,l=Math.ceil(a/s/f),c=Math.ceil(u/r/f),m+=t*l+i,m*=4*o;const y=this._storageIndex.subarray(m,m+4*o);let p=0,d=0;const g=[];for(let x=0;x<o;x++)p=y[4*x+0]*2**32+y[4*x+1],d=p+y[4*x+2]*2**32+y[4*x+3],g.push({from:p,to:d});return{ranges:g,actualTileWidth:i<l-1?s:Math.ceil(a/f)-s*(l-1),actualTileHeight:t<c-1?r:Math.ceil(u/f)-r*(c-1)}}_parseHeader(e){const t=z(e,"MRF_META/Raster");if(!t)throw new $("mrf:open","not a valid MRF format");const i=z(t,"Size"),s=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),n=parseInt(i.getAttribute("c"),10),a=(U(t,"Compression")||"none").toLowerCase();if(!Z.has(a))throw new $("mrf:open","currently does not support compression "+a);const u=U(t,"DataType")||"UInt8",o=j.get(u);if(o==null)throw new $("mrf:open","currently does not support pixel type "+u);const l=z(t,"PageSize"),c=parseInt(l.getAttribute("x"),10),h=parseInt(l.getAttribute("y"),10),m=z(t,"DataValues");let f,y;if(m&&(y=m.getAttribute("NoData"),y!=null&&(f=y.trim().split(" ").map(B=>parseFloat(B)))),z(e,"MRF_META/CachedSource"))throw new $("mrf:open","currently does not support MRF referencing other data files");const p=z(e,"MRF_META/GeoTags"),d=z(p,"BoundingBox");if(d==null)throw new $("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const g=parseFloat(d.getAttribute("minx")),x=parseFloat(d.getAttribute("miny")),w=parseFloat(d.getAttribute("maxx")),k=parseFloat(d.getAttribute("maxy")),v=U(p,"Projection")||"",T=U(e,"datafile"),b=U(e,"IndexFile");let C;if(v!=="LOCAL_CS[]")if(v.toLowerCase().startsWith("epsg:")){const B=Number(v.slice(5));isNaN(B)||B===0||(C=new G({wkid:B}))}else C=we(v);const R=new L(g,x,w,k);R.spatialReference=C;const M=z(e,"MRF_META/Rsets"),E=parseInt(M&&M.getAttribute("scale")||"2",10),F=new fe({origin:new N({x:R.xmin,y:R.ymax,spatialReference:C}),blockWidth:c,blockHeight:h,pyramidBlockWidth:c,pyramidBlockHeight:h,compression:a,pyramidScalingFactor:E}),J=new N({x:(w-g)/s,y:(k-x)/r,spatialReference:C});return{rasterInfo:new re({width:s,height:r,extent:R,spatialReference:C,bandCount:n,pixelType:o,pixelSize:J,noDataValue:f,storageInfo:F}),files:{mrf:this.url,index:b||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",Z.get(a).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return ke(t)}catch{return null}}};I([S()],se.prototype,"_files",void 0),I([S()],se.prototype,"_storageIndex",void 0),I([S({type:String,json:{write:!0}})],se.prototype,"datasetFormat",void 0),se=I([Y("esri.layers.support.rasterIO.MRFRaster")],se);const ci=se,Le=function(e,t){const i=e.get(t);return i&&i.values},xe=function(e,t){const i=e.get(t);return i&&i.values[0]};let ee=class extends oe{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var t,i,s;await this.init();const r=e?V(e.signal):null,{data:n}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:r});if(!n)throw new $("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:a,firstIFD:u,isBigTiff:o}=wt(n),l=[];await this.readIFDs(l,n,a,u,0,o?8:4,r);const c=vt(l),{width:h,height:m,tileWidth:f,tileHeight:y,planes:p,pixelType:d,compression:g,firstPyramidLevel:x,maximumPyramidLevel:w,pyramidBlockWidth:k,pyramidBlockHeight:v,tileBoundary:T,affine:b,metadata:C}=c,R=((t=c.extent.spatialReference)==null?void 0:t.wkt)||((i=c.extent.spatialReference)==null?void 0:i.wkid);let M=we(R),E=!1;M==null&&(E=!0,M=new G({wkid:3857}));const F=new L({...c.extent,spatialReference:M}),J=new N(F?{x:F.xmin,y:F.ymax,spatialReference:M}:{x:0,y:0}),B=new fe({blockWidth:f,blockHeight:y,pyramidBlockWidth:k,pyramidBlockHeight:v,compression:g,origin:J,firstPyramidLevel:x,maximumPyramidLevel:w,blockBoundary:T}),ie=new N({x:(F.xmax-F.xmin)/h,y:(F.ymax-F.ymin)/m,spatialReference:M}),W=C?{BandProperties:C.bandProperties,DataType:C.dataType}:{},_=new re({width:h,height:m,bandCount:p,pixelType:d,compression:g,pixelSize:ie,storageInfo:B,spatialReference:M,isPseudoSpatialReference:E,keyProperties:W,extent:F,statistics:C?C.statistics:null});if(b!=null&&b.length&&(_.nativeExtent=new L({xmin:-.5,ymin:.5-m,xmax:h-.5,ymax:.5,spatialReference:M}),_.transform=new Ce({polynomialOrder:1,forwardCoefficients:[b[2]+b[0]/2,b[5]-b[3]/2,b[0],b[3],-b[1],-b[4]]}),_.extent=_.transform.forwardTransform(_.nativeExtent),_.pixelSize=new N({x:(F.xmax-F.xmin)/h,y:(F.ymax-F.ymin)/m,spatialReference:M}),B.origin.x=-.5,B.origin.y=.5),(s=this.ioConfig.skipExtensions)==null||!s.includes("aux.xml")){const D=await this._fetchAuxiliaryData(e);if(D!=null){var X;if(_.statistics=(X=D.statistics)!=null?X:_.statistics,_.histograms=D.histograms,D.histograms&&!P(_.statistics)&&(_.statistics=Re(D.histograms)),D.transform&&!b){_.transform=D.transform,_.nativeExtent=_.extent;const K=_.transform.forwardTransform(_.nativeExtent);_.pixelSize=new N({x:(K.xmax-K.xmin)/h,y:(K.ymax-K.ymin)/m,spatialReference:M}),_.extent=K}_.spatialReference||(_.spatialReference=D.spatialReference)}}if(this._set("rasterInfo",_),this._headerInfo={littleEndian:a,isBigTiff:o,ifds:l,...c},!this._headerInfo.isSupported)throw new $("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){var r;if((r=this._headerInfo)==null||!r.isSupported||this.isBlockOutside(e,t,i))return null;const n=this.getTileLocation(e,t,i);if(!n)return null;const{ranges:a,actualTileWidth:u,actualTileHeight:o,ifd:l}=n,c=a.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:s.signal})),h=await Promise.all(c),m=h.map(T=>T.data.byteLength).reduce((T,b)=>T+b),f=h.length===1?h[0].data:new ArrayBuffer(m),y=[0],p=[0];if(h.length>1){const T=new Uint8Array(f);for(let b=0,C=0;b<h.length;b++){const R=h[b].data;T.set(new Uint8Array(R),C),y[b]=C,C+=R.byteLength,p[b]=R.byteLength}}const{blockWidth:d,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:y,sizes:p},width:d,height:g,planes:null,pixelType:null});let w,k,v;if(u!==d||o!==g){let T=x.mask;if(T)for(w=0;w<g;w++)if(v=w*d,w<o)for(k=u;k<d;k++)T[v+k]=0;else for(k=0;k<d;k++)T[v+k]=0;else for(T=new Uint8Array(d*g),x.mask=T,w=0;w<o;w++)for(v=w*d,k=0;k<u;k++)T[v+k]=1}return x}async readIFDs(e,t,i,s,r,n=4,a){if(!s)return null;(s>=t.byteLength||s<0)&&(t=(await this.request(this.url,{range:{from:s+r,to:s+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=s+r,s=0);const u=await this.readIFD(t,i,s,r,me.TIFF_TAGS,n,a);if(e.push(u.ifd),!u.nextIFD)return null;await this.readIFDs(e,t,i,u.nextIFD-r,r,n,a)}async readIFD(e,t,i,s,r=me.TIFF_TAGS,n=4,a){if(!e)return null;const u=bt(e,t,i,s,r,n);if(u.success){const o=[];if(u.ifd.forEach(l=>{l.values||o.push(l)}),o.length>0){const l=o.map(h=>h.offlineOffsetSize),c=Math.min.apply(null,l.map(h=>h[0]));if(Math.min.apply(null,l.map(h=>h[0]+h[1]))-c<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:c,to:c+this._bufferSize},responseType:"array-buffer",signal:a});e=h,s=c,o.forEach(m=>St(e,t,m,s))}}if(u.ifd.has("GEOKEYDIRECTORY")){const l=u.ifd.get("GEOKEYDIRECTORY"),c=l.values;if(c&&c.length>4){const h=c[0]+"."+c[1]+"."+c[2],m=await this.readIFD(e,t,l.valueOffset+6-s,s,me.GEO_KEYS,2,a);l.data=m.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return u}if(u.requiredBufferSize&&u.requiredBufferSize!==e.byteLength)return(e=(await this.request(this.url,{range:{from:s,to:s+u.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data).byteLength<u.requiredBufferSize?null:this.readIFD(e,t,0,s,me.TIFF_TAGS,4,a)}getTileLocation(e,t,i){const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,n=e===0?0:e-(s-1),a=this._headerInfo.ifds[n];if(!a)return null;const u=Tt(a,this._headerInfo),o=Le(a,"TILEOFFSETS");if(o===void 0)return null;const l=Le(a,"TILEBYTECOUNTS"),{minRow:c,minCol:h,maxRow:m,maxCol:f}=r[n];if(t>m||i>f||t<c||i<h)return null;const y=xe(a,"IMAGEWIDTH"),p=xe(a,"IMAGELENGTH"),d=xe(a,"TILEWIDTH"),g=xe(a,"TILELENGTH"),x=u?this.rasterInfo.bandCount:1,w=x*t*(f+1)+i,k=[{from:o[w],to:o[w+x-1]+l[w+x-1]-1}];if(u){let b=!0;for(let C=0;C<x;C++)if(o[w+C]+l[w+C]!==o[w+C+1]){b=!1;break}if(!b)for(let C=0;C<x;C++)k[C]={from:o[w+C],to:o[w+C]+l[w+C]-1}}const v=o[w],T=l[w];return v==null||T==null?null:{ranges:k,ifd:a,actualTileWidth:i===f?y%d:d,actualTileHeight:t===m?p%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return ke(t)}catch{return null}}};I([S()],ee.prototype,"_files",void 0),I([S()],ee.prototype,"_headerInfo",void 0),I([S()],ee.prototype,"_bufferSize",void 0),I([S({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),ee=I([Y("esri.layers.support.rasterDatasets.TIFFRaster")],ee);const hi=ee,H=new Map;H.set("CRF",{desc:"Cloud Raster Format",constructor:ni}),H.set("MRF",{desc:"Meta Raster Format",constructor:ci}),H.set("TIFF",{desc:"GeoTIFF",constructor:hi}),H.set("RasterTileServer",{desc:"Raster Tile Server",constructor:ui}),H.set("JPG",{desc:"JPG Raster Format",constructor:ge}),H.set("PNG",{desc:"PNG Raster Format",constructor:ge}),H.set("GIF",{desc:"GIF Raster Format",constructor:ge}),H.set("BMP",{desc:"BMP Raster Format",constructor:ge});class fi{static get supportedFormats(){const t=new Set;return H.forEach((i,s)=>t.add(s)),t}static async open(t){const{url:i,ioConfig:s,sourceJSON:r}=t;let n=t.datasetFormat;n==null&&i.lastIndexOf(".")&&(n=i.slice(i.lastIndexOf(".")+1).toUpperCase()),n==="OVR"||n==="TIF"?n="TIFF":n!=="JPG"&&n!=="JPEG"&&n!=="JFIF"||(n="JPG"),i.toLowerCase().indexOf("/imageserver")>-1&&i.toLowerCase().indexOf("/wcsserver")===-1&&(n="RasterTileServer");const a={url:i,sourceJSON:r,datasetFormat:n,ioConfig:s||{bandIds:null,sampling:null}};let u,o;if(this.supportedFormats.has(n))return u=H.get(n).constructor,o=new u(a),await o.open({signal:t.signal}),o;if(n)throw new $("rasterfactory:open","not a supported format "+n);const l=Array.from(H.keys());let c=0;const h=function(){return n=l[c++],n?(u=H.get(n).constructor,o=new u(a),o.open({signal:t.signal}).then(()=>o).catch(()=>h())):null};return h()}static register(t,i,s){H.has(t.toUpperCase())||H.set(t.toUpperCase(),{desc:i,constructor:s})}}let O=class extends Rt(Ct(kt(_t(Mt(ti(Pt(Ft(Ot($t))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(Dt).then(()=>this._openRaster(t))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var e,t;let i=[new he({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const s=(e=this.rasterInfo)==null||(t=e.attributeTable)==null?void 0:t.fields,r="Raster.";if(s){const u=s.filter(o=>o.type!=="oid"&&o.name.toLowerCase()!=="value").map(o=>{const l=o.clone();return l.name=r+o.name,l});i=i.concat(u)}const n=this.rasterInfo.dataType;if((n==="vector-magdir"||n==="vector-uv")&&P(this.rasterInfo.multidimensionalInfo)){var a;const u=(a=this.rasterInfo.multidimensionalInfo.variables[0].unit)==null?void 0:a.trim(),o="Magnitude"+(u?` (${u})`:"");i.push(new he({name:"Raster.Magnitude",alias:o,domain:null,editable:!1,type:"double"})),i.push(new he({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return i}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const s=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,r=Bt(s,i)||void 0;if(r!=null)return r}createPopupTemplate(e){return Et({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?i.datasetFormat==="RasterTileServer"&&(i.tileType==="Raster"||i.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const s=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new $("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await fi.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new $("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText),this.sourceJSON.timeInfo&&this._set("timeInfo",At.fromJSON(this.sourceJSON.timeInfo))),this.title==null&&(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",i=>this.raster.ioConfig.customFetchParameters=i)}};I([S({type:[Ht],json:{write:{overridePolicy(){var e;return{enabled:!this.loaded||this.raster.tileType==="Raster"||((e=this.bandIds)==null?void 0:e.join(","))!=="0,1,2"}}}}})],O.prototype,"bandIds",void 0),I([S({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Nt(zt)],O.prototype,"interpolation",void 0),I([S({json:{write:!0}})],O.prototype,"multidimensionalDefinition",void 0),I([S(Lt)],O.prototype,"legendEnabled",void 0),I([S({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],O.prototype,"isReference",void 0),I([S({type:["show","hide"]})],O.prototype,"listMode",void 0),I([S()],O.prototype,"sourceJSON",void 0),I([S({readOnly:!0})],O.prototype,"version",void 0),I([S()],O.prototype,"title",void 0),I([S({readOnly:!0,json:{read:!1}})],O.prototype,"type",void 0),I([S({type:["ArcGISTiledImageServiceLayer"]})],O.prototype,"operationalLayerType",void 0),I([S({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(e,t,i){t[i]=!e}}}})],O.prototype,"popupEnabled",void 0),I([S({type:Jt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],O.prototype,"popupTemplate",void 0),I([S({readOnly:!0})],O.prototype,"defaultPopupTemplate",null),I([S({readOnly:!0,type:[he]})],O.prototype,"fields",void 0),I([S({readOnly:!0,type:[he]})],O.prototype,"rasterFields",null),I([S({types:qe,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const t=((e=this.renderer)==null?void 0:e.type)==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!t}}},origins:{"web-scene":{types:Wt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="animated-flow"})}}}}})],O.prototype,"renderer",null),I([qt("renderer")],O.prototype,"readRenderer",null),O=I([Y("esri.layers.ImageryTileLayer")],O);const gi=O;export{gi as default};
