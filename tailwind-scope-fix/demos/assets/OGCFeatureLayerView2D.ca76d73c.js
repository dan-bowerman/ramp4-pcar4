import{e as i,d as a,i as o,s as l}from"./main.89f1c244.js";import m from"./FeatureLayerView2D.61df88b6.js";import"./Container.81d92887.js";import"./drapedUtils.5ad94d19.js";import"./definitions.21e97413.js";import"./LayerView.11110a3e.js";import"./schemaUtils.992a86bd.js";import"./Utils.b43238d5.js";import"./Texture.1f64c3bd.js";import"./MaterialKey.cb265c69.js";import"./visualVariablesUtils.fea27496.js";import"./CIMSymbolHelper.0ddaff48.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.2d4eb823.js";import"./quantizationUtils.d9c50ce4.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.ff43241d.js";import"./popupUtils.c6b9281d.js";import"./RefreshableLayerView.3b8c5402.js";const n=p=>{let e=class extends p{initialize(){const{layer:r,view:s}=this;r.source.supportsSpatialReference(s.spatialReference)||this.addResolvingPromise(Promise.reject(new l("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:r})))}get availableFields(){return this.layer.fieldsIndex.fields.map(r=>r.name)}};return i([a()],e.prototype,"layer",void 0),i([a({readOnly:!0})],e.prototype,"availableFields",null),e=i([o("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=i([o("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const j=t;export{j as default};
