import{e as i,d as a,i as o,s as l}from"./main.a2193d12.js";import m from"./FeatureLayerView2D.cd941df7.js";import"./Container.90f105a3.js";import"./drapedUtils.8eb864ca.js";import"./definitions.21e97413.js";import"./LayerView.ccb79f98.js";import"./schemaUtils.a84fd818.js";import"./Utils.1e245f8c.js";import"./Texture.84345407.js";import"./MaterialKey.529710c0.js";import"./visualVariablesUtils.d263b4b6.js";import"./CIMSymbolHelper.06fe97c7.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.338a57a7.js";import"./quantizationUtils.67bbf875.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.4fbb8785.js";import"./popupUtils.59f41735.js";import"./RefreshableLayerView.34a6c114.js";const n=p=>{let e=class extends p{initialize(){const{layer:r,view:s}=this;r.source.supportsSpatialReference(s.spatialReference)||this.addResolvingPromise(Promise.reject(new l("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:r})))}get availableFields(){return this.layer.fieldsIndex.fields.map(r=>r.name)}};return i([a()],e.prototype,"layer",void 0),i([a({readOnly:!0})],e.prototype,"availableFields",null),e=i([o("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=i([o("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const j=t;export{j as default};
