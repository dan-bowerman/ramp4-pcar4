import{aD as p,cP as c,S as g,iP as w,iQ as f,cp as l,e as d,i as u}from"./main.1dea2a78.js";import{l as S,u as V}from"./LayerView.857e8f0f.js";import{i as b}from"./GraphicContainer.b170d888.js";import{i as v}from"./BaseGraphicContainer.b9abc715.js";import"./Container.d1c46373.js";import"./Utils.371314da.js";import"./Texture.3f41a67d.js";import"./CIMSymbolHelper.ba66cceb.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.b5dac27c.js";import"./json.2d0d6862.js";import"./VertexArrayObject.618a3ab4.js";import"./FeatureContainer.ad3db984.js";import"./TileContainer.bde74776.js";import"./WGLContainer.81dde107.js";import"./ShaderCompiler.54796766.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.84973267.js";import"./earcut.f20dd8d8.js";import"./visualVariablesUtils.1a09af42.js";import"./visualVariablesUtils.6a218518.js";import"./Matcher.8643373b.js";import"./tileUtils.d840c53d.js";import"./TileClipper.2745536b.js";import"./cimSymbolUtils.8a910f5e.js";import"./quantizationUtils.7d313386.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.244bddd0.js";import"./MD5.f9440c6b.js";import"./util.d6840376.js";import"./ComputedAttributeStorage.1ae3b7f4.js";import"./FeatureSetReader.5140c0fa.js";import"./centroid.2ebdf102.js";import"./vec3f32.9cc42d31.js";let m=class extends S(V){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,r){if(!this.graphicsViews.length)return null;const a=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(a)).flat().filter((i,t)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[t]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(e)}attach(){this.handles.add([p(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:r,featureSet:a,layerDefinition:i}of e){const t=c.fromJSON(a),h=new g(t.features),n=i.drawingInfo,y=r?w.fromJSON(r):null,s=f(n.renderer),o=new v({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:h,renderer:s,container:new b(this.view.featuresTilingScheme)});this._graphicsViewMap[t.geometryType]=o,this._popupTemplates.set(o,y),t.geometryType!=="polygon"||this.layer.polygonSymbol?t.geometryType!=="polyline"||this.layer.lineSymbol?t.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),p(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),p(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),p(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};m=d([u("esri.views.2d.layers.GeoRSSLayerView2D")],m);const pe=m;export{pe as default};
