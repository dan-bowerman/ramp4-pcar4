import{e as i,d as a,i as o,s as l}from"./main.8ed8feb3.js";import m from"./FeatureLayerView2D.7ab426da.js";import"./Container.14c764d5.js";import"./drapedUtils.b5276940.js";import"./definitions.21e97413.js";import"./LayerView.1c24f1d0.js";import"./schemaUtils.6fc9affa.js";import"./Utils.31280ded.js";import"./Texture.a08b965c.js";import"./MaterialKey.0a1bb817.js";import"./visualVariablesUtils.895c6320.js";import"./CIMSymbolHelper.40aa54c1.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.701121e5.js";import"./quantizationUtils.e6b02686.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.f994a520.js";import"./popupUtils.d0a22df2.js";import"./RefreshableLayerView.55d003b5.js";const n=p=>{let e=class extends p{initialize(){const{layer:r,view:s}=this;r.source.supportsSpatialReference(s.spatialReference)||this.addResolvingPromise(Promise.reject(new l("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:r})))}get availableFields(){return this.layer.fieldsIndex.fields.map(r=>r.name)}};return i([a()],e.prototype,"layer",void 0),i([a({readOnly:!0})],e.prototype,"availableFields",null),e=i([o("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=i([o("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const j=t;export{j as default};
